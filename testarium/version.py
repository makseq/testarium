""" Version Lib
Copyright (C) 2019 Maxim Tkachenko 

This library automatically generates version of package based on git.
If 'git desc' is successful it will write version to __version__.py:git_version.  
If 'git desc' is fail it will read __version__.py:git_version.

ATTENTION: do not include version_.py to git! It will affect git commit always!
"""
from __future__ import print_function
from subprocess import STDOUT, CalledProcessError, check_output as run
import os
import sys
import logging

VERSION_FILE = 'version_.py'


def _write_py(version):
    # go to current dir to package __init__.py
    cwd = os.getcwd()
    os.chdir(os.path.dirname(__file__))

    # write txt
    with open(VERSION_FILE, 'w') as f:
        os.chdir(cwd)  # back current dir
        f.write('version = "%s"\n' % version +
                '\n# This file is automatically generated by version.py'
                '\n# Do not include it to git!\n')


def _read_py():
    # go to current dir to package __init__.py
    cwd = os.getcwd()
    module_dir = os.path.dirname(__file__)
    os.chdir(module_dir)

    # sys path
    need_remove = False
    if module_dir not in sys.path:
        sys.path.append(module_dir)
        need_remove = True

    # read version
    try:
        version = __import__(os.path.splitext(VERSION_FILE)[0]).version
        return version
    except ImportError as e:
        logging.error("Can't read version file: " + VERSION_FILE)
        logging.error(e)
        return None
    finally:
        os.chdir(cwd)  # back current dir
        if need_remove:
            sys.path.remove(module_dir)


def get_git_version():
    # take version from git
    try:
        desc = run('git describe --long --tags --always --dirty', stderr=STDOUT, shell=True)
        desc = desc.decode("utf-8")
    except CalledProcessError:
        return _read_py()

    # take OS name
    keys = ('ID=', 'VERSION_ID=', 'RELEASE=')
    with open('/etc/os-release') as f:
        s = [str(s).split("=", 1)[1].rstrip().strip('"').replace('.', '') for s in f if str(s).startswith(keys)]
        os_version = ''.join(s)

    # create package version
    version = desc.lstrip('v').rstrip().replace('-', '+', 1).replace('-', '.') + '.' + os_version
    _write_py(version)
    return version


# get only tag from git
def get_short_version():
    version = get_git_version()
    version = version.replace('+', '.').split('.')  # eg.: 0.5+4.g9b9c266.ubuntu1604 => [0][5][4][g9b9c266][ubuntu1604]
    version = '.'.join(version[0:3])
    return version.split('+')[0]
